{"name":"Opus","tagline":"Mirror of git://git.opus-codec.org/opus.git","body":"== Opus audio codec ==\r\n\r\nOpus is a codec for interactive speech and audio transmission over the Internet.\r\n\r\n  Opus can handle a wide range of interactive audio applications, including\r\nVoice over IP, videoconferencing, in-game  chat, and even remote live music\r\nperformances. It can scale from low bit-rate narrowband speech to very high\r\nquality stereo music.\r\n\r\n  Opus, when coupled with an appropriate container format, is also suitable\r\nfor non-realtime  stored-file applications such as music distribution, game\r\nsoundtracks, portable music players, jukeboxes, and other applications that\r\nhave historically used high latency formats such as MP3, AAC, or Vorbis.\r\n\r\n                    Opus is specified by IETF RFC 6716:\r\n                    http://tools.ietf.org/html/rfc6716\r\n\r\n  The Opus format and this implementation of it are subject to the royalty-\r\nfree patent and copyright licenses specified in the file COPYING.\r\n\r\nThis package implements a shared library for encoding and decoding raw Opus\r\nbitstreams. Raw Opus bitstreams should be used over RTP according to\r\n http://tools.ietf.org/html/draft-spittka-payload-rtp-opus\r\n\r\nThe package also includes a number of test  tools used for testing the\r\ncorrect operation of the library. The bitstreams read/written by these\r\ntools should not be used for Opus file distribution: They include\r\nadditional debugging data and cannot support seeking.\r\n\r\nOpus stored in files should use the Ogg encapsulation for Opus which is\r\ndescribed at:\r\n http://wiki.xiph.org/OggOpus\r\n\r\nAn opus-tools package is available which provides encoding and decoding of\r\nOgg encapsulated Opus files and includes a number of useful features.\r\n\r\nOpus-tools can be found at:\r\n https://git.xiph.org/?p=opus-tools.git\r\nor on the main Opus website:\r\n http://opus-codec.org/\r\n\r\n== Compiling libopus ==\r\n\r\nTo build from a distribution tarball, you only need to do the following:\r\n\r\n% ./configure\r\n% make\r\n\r\nTo build from the git repository, the following steps are necessary:\r\n\r\n1) Clone the repository:\r\n\r\n% git clone git://git.opus-codec.org/opus.git\r\n% cd opus\r\n\r\n2) Compiling the source\r\n\r\n% ./autogen.sh\r\n% ./configure\r\n% make\r\n\r\n3) Install the codec libraries (optional)\r\n\r\n% sudo make install\r\n\r\nOnce you have compiled the codec, there will be a opus_demo executable\r\nin the top directory.\r\n\r\nUsage: opus_demo [-e] <application> <sampling rate (Hz)> <channels (1/2)>\r\n         <bits per second> [options] <input> <output>\r\n       opus_demo -d <sampling rate (Hz)> <channels (1/2)> [options]\r\n         <input> <output>\r\n\r\nmode: voip | audio | restricted-lowdelay\r\noptions:\r\n  -e                : only runs the encoder (output the bit-stream)\r\n  -d                : only runs the decoder (reads the bit-stream as input)\r\n  -cbr              : enable constant bitrate; default: variable bitrate\r\n  -cvbr             : enable constrained variable bitrate; default:\r\n                      unconstrained\r\n  -bandwidth <NB|MB|WB|SWB|FB>\r\n                    : audio bandwidth (from narrowband to fullband);\r\n                      default: sampling rate\r\n  -framesize <2.5|5|10|20|40|60>\r\n                    : frame size in ms; default: 20\r\n  -max_payload <bytes>\r\n                    : maximum payload size in bytes, default: 1024\r\n  -complexity <comp>\r\n                    : complexity, 0 (lowest) ... 10 (highest); default: 10\r\n  -inbandfec        : enable SILK inband FEC\r\n  -forcemono        : force mono encoding, even for stereo input\r\n  -dtx              : enable SILK DTX\r\n  -loss <perc>      : simulate packet loss, in percent (0-100); default: 0\r\n\r\ninput and output are little-endian signed 16-bit PCM files or opus\r\nbitstreams with simple opus_demo proprietary framing.\r\n\r\n== Testing ==\r\n\r\nThis package includes a collection of automated unit and system tests\r\nwhich SHOULD be run after compiling the package especially the first\r\ntime it is run on a new platform.\r\n\r\nTo run the integrated tests:\r\n% make check\r\n\r\nThere is also collection of standard test vectors which are not\r\nincluded in this package for size reasons but can be obtained from:\r\nhttp://opus-codec.org/testvectors/opus_testvectors.tar.gz\r\n\r\nTo run compare the code to these test vectors:\r\n\r\n% curl -O http://opus-codec.org/testvectors/opus_testvectors.tar.gz\r\n% tar -zxf opus_testvectors.tar.gz\r\n% ./tests/run_vectors.sh ./ opus_testvectors 48000\r\n\r\n== Portability notes ==\r\n\r\nThis implementation uses floating-point by default but can be compiled to\r\nuse only fixed-point arithmetic by setting --enable-fixed-point (if using\r\nautoconf) or by defining the FIXED_POINT macro (if building manually).\r\nThe fixed point implementation has somewhat lower audio quality and is\r\nslower on platforms with fast FPUs, it is normally only used in embedded\r\nenvironments.\r\n\r\nThe implementation can be compiled with either a C89 or a C99 compiler.\r\nWhile it does not rely on any _undefined behavior_ as defined by C89 or\r\nC99, it relies on common _implementation-defined behavior_ for two's\r\ncomplement architectures:\r\n\r\no Right shifts of negative values are consistent with two's\r\n  complement arithmetic, so that a>>b is equivalent to\r\n  floor(a/(2^b)),\r\n\r\no For conversion to a signed integer of N bits, the value is reduced\r\n  modulo 2^N to be within range of the type,\r\n\r\no The result of integer division of a negative value is truncated\r\n  towards zero, and\r\n\r\no The compiler provides a 64-bit integer type (a C99 requirement\r\n  which is supported by most C89 compilers).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}